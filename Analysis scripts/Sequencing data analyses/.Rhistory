library(DESeq2)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(ggh4x)
library(ggrepel)
library(scales)
nmd_up <- scan("nmd_up_907.txt", character())
# countData
tab <- read.csv("../Processed data/RSEM output/RNAseq_RSEM_expected_count_isoforms.results.csv", row.names = 1)
tab <- round(x = tab, digits = 0)
tab <- tab[rowSums(tab) > 0, ]
source("functions_sequencing.R")
# colData
cdt <- ccdt(count_tab = tab)
nmd <- s3_sig[which(s3_sig$log2FoldChange_WT_upf1 > 0 & s3_sig$log2FoldChange_WT_upf2 > 0 & s3_sig$log2FoldChange_WT_upf3 > 0), ]
s3 <- readxl::read_xlsx("../Processed data/Celik_RNA_2017_Supplemental_Table_S3.xlsx", col_types = c("text", rep("numeric", times = 42)))
s3_sig <- s3[which(s3$padj_WT_upf1 < 0.01 & s3$padj_WT_upf2 < 0.01 & s3$padj_WT_upf3 < 0.01), ]
nmd <- s3_sig[which(s3_sig$log2FoldChange_WT_upf1 > 0 & s3_sig$log2FoldChange_WT_upf2 > 0 & s3_sig$log2FoldChange_WT_upf3 > 0), ]
s3$NMD <- ifelse(test = s3$id %in% nmd$id, yes = "NMD substrates", no = "Non-NMD substrates")
s3_list <- list()
s3_list[["upf1d"]] <- s3[, c("id", "baseMean_WT_upf1", "log2FoldChange_WT_upf1", "pval_WT_upf1", "padj_WT_upf1", "NMD")]
s3_list[["upf2d"]] <- s3[, c("id", "baseMean_WT_upf2", "log2FoldChange_WT_upf2", "pval_WT_upf2", "padj_WT_upf2", "NMD")]
s3_list[["upf3d"]] <- s3[, c("id", "baseMean_WT_upf3", "log2FoldChange_WT_upf3", "pval_WT_upf3", "padj_WT_upf3", "NMD")]
for (i in 1:3) {
colnames(s3_list[[i]]) <- c("row", "baseMean", "log2FoldChange", "pvalue", "padj", "NMD")
}
s3_df <- bind_rows(s3_list, .id = "sample")
s3_df$sig <- ifelse(test = s3_df$padj < 0.01, yes = "p < 0.01", no = "ns")
s3_df$pair2 <- sub("d", "Δ\n(-CHX)", s3_df$sample)
toplot$lfcSE <- NULL
dds <- DESeqDataSetFromMatrix(countData = tab, colData = cdt, design = ~strainCHX)
dds$strainCHX <- relevel(dds$strainCHX, ref = "WT@plus")
DGE <- DESeq(dds)
source("functions_sequencing.R")
# colData
cdt <- ccdt(count_tab = tab)
dds <- DESeqDataSetFromMatrix(countData = tab, colData = cdt, design = ~strainCHX)
dds$strainCHX <- relevel(dds$strainCHX, ref = "WT@plus")
DGE <- DESeq(dds)
View(cdt)
resultsNames(DGE)
res_t <- list()
res_t[["FLAG-UPF1_m_WT_m"]] <- results(DGE, contrast = c("strainCHX", "FLAG_Upf1@minus", "WT@minus"), pAdjustMethod = "fdr", tidy = TRUE, independentFiltering = TRUE, alpha = 0.01)
res_t[["FLAG-UPF1_p_WT_p"]] <- results(DGE, contrast = c("strainCHX", "FLAG_Upf1@plus", "WT@plus"), pAdjustMethod = "fdr", tidy = TRUE, independentFiltering = TRUE, alpha = 0.01)
res_t[["TripleOE_p_WT_p"]] <- results(DGE, contrast = c("strainCHX", "OE3@plus", "WT@plus"), pAdjustMethod = "fdr", tidy = TRUE, independentFiltering = TRUE, alpha = 0.01)
res_t[["UPF1-FLAG_p_WTEV_p"]] <- results(DGE, contrast = c("strainCHX", "Upf1_FLAG@plus", "WTplusEV@plus"), pAdjustMethod = "fdr", tidy = TRUE, independentFiltering = TRUE, alpha = 0.01)
res_t[["UPF1-FLAG_upf2d_p_WTEV_p"]] <- results(DGE, contrast = c("strainCHX", "Upf1_FLAG_upf2del@plus", "WTplusEV@plus"), pAdjustMethod = "fdr", tidy = TRUE, independentFiltering = TRUE, alpha = 0.01)
res_t[["DE572AA-FLAG_p_WTEV_p"]] <- results(DGE, contrast = c("strainCHX", "DE572AA_FLAG@plus", "WTplusEV@plus"), pAdjustMethod = "fdr", tidy = TRUE, independentFiltering = TRUE, alpha = 0.01)
toplot <- bind_rows(res_t, .id = "sample")
toplot$NMD <- ifelse(test = toplot$row %in% nmd_up, yes = "NMD substrates", no = "Non-NMD substrates")
toplot$sig <- ifelse(test = toplot$padj < 0.01, yes = "p < 0.01", no = "ns")
toplot$sig <- factor(toplot$sig, levels = c("p < 0.01", "ns"))
#toplot$repel <- NA
#toplot[toplot$row == "YMR080C_mRNA", ]$repel <- "UPF1"
#toplot[toplot$row == "YHR077C_mRNA", ]$repel <- "UPF2"
#toplot[toplot$row == "YGR072W_mRNA", ]$repel <- "UPF3"
toplot$pair2 <- sub("_WT.*", "", toplot$sample)
toplot$pair2 <- gsub("_p", "\n(+CHX)", toplot$pair2)
toplot$pair2 <- gsub("_m", "\n(-CHX)", toplot$pair2)
toplot$pair2 <- sub("_upf2d", "/upf2Δ", toplot$pair2)
toplot$pair2 <- sub("TripleOE", "FLAG-UPF1 UPF2/3 EE", toplot$pair2)
toplot$pair2 <- factor(toplot$pair2, levels = c("FLAG-UPF1\n(-CHX)", "FLAG-UPF1\n(+CHX)", "FLAG-UPF1 UPF2/3 EE\n(+CHX)", "UPF1-FLAG\n(+CHX)", "UPF1-FLAG/upf2Δ\n(+CHX)", "DE572AA-FLAG\n(+CHX)"))
toplot$lfcSE <- NULL
toplot$stat <- NULL
df <- rbind(toplot, s3_df)
df$pair2 <- factor(df$pair2, levels = c("UPF1-FLAG\n(+CHX)", "UPF1-FLAG/upf2Δ\n(+CHX)", "DE572AA-FLAG\n(+CHX)", # second row
"FLAG-UPF1\n(+CHX)", "FLAG-UPF1 UPF2/3 EE\n(+CHX)", # second row
"upf1Δ\n(-CHX)", "upf2Δ\n(-CHX)", "upf3Δ\n(-CHX)", "FLAG-UPF1\n(-CHX)")) # first row
df_filter <- df[which(df$NMD == "NMD substrates" & df_filter$sig == "p < 0.01"), ]
df_filter <- df[which(df$NMD == "NMD substrates" & df$sig == "p < 0.01"), ]
lim = 10
df_filter$log2FoldChange_lim <- df_filter$log2FoldChange
df_filter[which(is.na(df_filter$log2FoldChange_lim)), ]$log2FoldChange_lim <- -lim
df_filter[df_filter$log2FoldChange_lim >= lim, ]$log2FoldChange_lim <- lim
df_filter[df_filter$log2FoldChange_lim <= -lim, ]$log2FoldChange_lim <- -lim
df_filter$outsidelim <- "No"
df_filter[df_filter$log2FoldChange_lim >= lim, ]$outsidelim <- "Above"
df_filter[df_filter$log2FoldChange_lim <= -lim, ]$outsidelim <- "Below"
df_filter$pair2 <- factor(df_filter$pair2, levels = c("UPF1-FLAG\n(+CHX)", "UPF1-FLAG/upf2Δ\n(+CHX)", "DE572AA-FLAG\n(+CHX)", # 2nd row
"FLAG-UPF1\n(+CHX)", "FLAG-UPF1 UPF2/3 EE\n(+CHX)", # 2nd row
"upf1Δ\n(-CHX)", "upf2Δ\n(-CHX)", "upf3Δ\n(-CHX)", "FLAG-UPF1\n(-CHX)")) # 1st row
nn <- data.frame(table(pair2 = df_filter$pair2, sig = df_filter$sig))
nn$xn <- rep(c(10^-1, 10^3.5), each = 9)
nn$yn <- -lim-0.5
View(nn)
nn <- data.frame(table(pair2 = df_filter$pair2))
nn$xn <- rep(c(10^-1, 10^3.5), each = 9)
nn$yn <- -lim-0.5
nn <- data.frame(table(pair2 = df_filter$pair2, sig = df_filter$sig))
nn$xn <- rep(c(10^-1, 10^3.5), each = 9)
df_filter <- df[which(df$NMD == "NMD substrates"), ] # only plot NMD substrates
lim = 10
df_filter$log2FoldChange_lim <- df_filter$log2FoldChange
df_filter[which(is.na(df_filter$log2FoldChange_lim)), ]$log2FoldChange_lim <- -lim
df_filter[df_filter$log2FoldChange_lim >= lim, ]$log2FoldChange_lim <- lim
df_filter[df_filter$log2FoldChange_lim <= -lim, ]$log2FoldChange_lim <- -lim
df_filter$outsidelim <- "No"
df_filter[df_filter$log2FoldChange_lim >= lim, ]$outsidelim <- "Above"
df_filter[df_filter$log2FoldChange_lim <= -lim, ]$outsidelim <- "Below"
df_filter$pair2 <- factor(df_filter$pair2, levels = c("UPF1-FLAG\n(+CHX)", "UPF1-FLAG/upf2Δ\n(+CHX)", "DE572AA-FLAG\n(+CHX)", # 2nd row
"FLAG-UPF1\n(+CHX)", "FLAG-UPF1 UPF2/3 EE\n(+CHX)", # 2nd row
"upf1Δ\n(-CHX)", "upf2Δ\n(-CHX)", "upf3Δ\n(-CHX)", "FLAG-UPF1\n(-CHX)")) # 1st row
nn <- data.frame(table(pair2 = df_filter$pair2, sig = df_filter$sig))
nn$xn <- rep(c(10^-1, 10^3.5), each = 9)
nn$yn <- -lim-0.5
p <- ggplot(df_filter[which(df_filter$sig == "p < 0.01"), ]) +
geom_point(aes(x = baseMean, y = log2FoldChange_lim, color = sig, shape = outsidelim), alpha = 0.25, size = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey50") +
geom_text(data = nn[which(nn$sig == "p < 0.01"), ], aes(x = 10^1, y = yn, label = paste0("n = ", Freq), color = sig), size = 2, hjust = 0, show.legend = FALSE) +
facet_wrap(~pair2, nrow = 2, as.table = FALSE) +
scale_x_log10(labels = trans_format("log10", label_math())) +
scale_color_manual(name = "", values = c("darkblue", "grey40")) + # color by sig
scale_shape_manual(name = "", values = c(Above = 2, Below = 6, No = 1)) + # For plotting out-of-bound data points
xlab("Mean of normalized counts") + ylab(expression(paste("log"[2]*" fold change relative to respective ", italic("WT"), " (+ EV)"))) +
coord_cartesian(ylim = c(-10.5, 10)) +
theme_bw(base_size = 8) +
theme(legend.position = "none", panel.grid = element_blank(), strip.placement = "outside",
strip.background = element_blank(), strip.text = element_text(face = "italic")) +
guides(color = guide_legend(override.aes = list(alpha = 0.5, size = 2)),
shape = "none")
library(Cairo)
CairoFonts(
regular = "Arial:style=Regular",
bold = "Arial:style=Black",
italic = "Arial:style=Italic",
bolditalic = "Arial:style=Black Italic",
symbol = "Symbol"
)
cairo_pdf(filename = "../Figures/RNASeq_MAplot_strain-vs-WT_NMDsubstrates_onlysig_limit10.pdf", family = "Arial", width = 6, height = 4)
p
dev.off()
load("/Users/kotcha/OneDrive - University Of Massachusetts Medical School/Robin/For_paper_v2_Upf1only/Ribo-Seq IP vs Total combine ML/mock_github/alldata.Rdata")
head(alldata)
toplot <- bind_rows(alldata, .id = "sample")
toplot$IPvsTotal_change <- recode_factor(toplot$IPvsTotal_change, Unchanged = "Unchanged", Enriched = "Enriched in IP", Depleted = "Depleted in IP")
toplot$MinvsMaj_change <- recode_factor(toplot$MinvsMaj_change, Unchanged = "Baseline", Enriched = "High", Depleted = "Low")
toplot$sample <- factor(toplot$sample, levels = sort(unique(toplot$sample))[c(2:5, 1)])
head(toplot)
A <- ggplot() +
geom_point(data = toplot,
aes(y = IPvsTotal_ave_numerator+0.5, x = IPvsTotal_ave_denominator+0.5, color = IPvsTotal_change), alpha = 0.3, size = 0.5) +
facet_nested(NMD~sample) +
scale_x_log10(labels = trans_format("log10", label_math())) + scale_y_log10(labels = trans_format("log10", label_math())) +
scale_color_manual(name = "", values = c("grey70", "orange", "purple")) +
xlab("Total (mean normalized counts)") + ylab("IP (mean normalized counts)") +
coord_cartesian(xlim = c(10^-0.5, 10^5), ylim = c(10^-0.5, 10^5)) +
theme_bw(base_size = 8) +
theme(strip.background = element_blank(), strip.text.x = element_text(face = "italic"), panel.grid = element_blank(),
legend.position = "top") +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 1)))
A
# Codon optimality
library(Biostrings)
library(seqinr)
library(dplyr)
## Read in sequence data
fasta <- readDNAStringSet("https://github.com/Jacobson-Lab/yeast_transcriptome_v5/blob/main/gffread_transcripts_from_v5_transcriptome_13AUG20218.fa")
## Read in sequence data
fasta <- readDNAStringSet("https://raw.githubusercontent.com/Jacobson-Lab/yeast_transcriptome_v5/main/gffread_transcripts_from_v5_transcriptome_13AUG20218.fa")
df <- data.frame(transcript_full = names(fasta), sequence = paste(fasta))
df$transcript_id <- sub(" gene.*", "", df$transcript_full)
transcriptome <- read.table("transcriptome_v5_mRNA_region_length.txt", header = TRUE)
setwd("./Sequencing data analyses/")
transcriptome <- read.table("transcriptome_v5_mRNA_region_length.txt", header = TRUE)
df <- left_join(df, transcriptome[, c("transcript_id", "length", "l_utr5", "l_cds", "l_utr3")], by = "transcript_id")
df[is.na(df$l_cds), ]$l_cds <- df[is.na(df$l_cds), ]$length
df[is.na(df$l_utr5), ]$l_utr5 <- 0
df[is.na(df$l_utr3), ]$l_utr3 <- 0
seq_cds <- substr(df$sequence, start = df$l_utr5 + 1, stop = df$l_utr5 + df$l_cds)
## Prepare codon optimality score (a.k.a "w") for each codon
# Derived from dos Reis et al., 2004 (doi: 10.1093/nar/gkh834).
# Obtained the calculated values from Tuller et al., 2010 (doi: 10.1073/pnas.0909910107)
scw <- data.frame(codons = c("TTT", "TTC", "TTA", "TTG", "TCT", "TCC", "TCA", "TCG", "TAT", "TAC", "TGT", "TGC", "TGG",
"CTT", "CTC", "CTA", "CTG", "CCT", "CCC", "CCA", "CCG", "CAT", "CAC", "CAA", "CAG", "CGT", "CGC", "CGA", "CGG",
"ATT", "ATC", "ATA", "ATG", "ACT", "ACC", "ACA", "ACG", "AAT", "AAC", "AAA", "AAG", "AGT", "AGC", "AGA", "AGG",
"GTT", "GTC", "GTA", "GTG", "GCT", "GCC", "GCA", "GCG", "GAT", "GAC", "GAA", "GAG", "GGT", "GGC", "GGA", "GGG"),
w = c(0.270320, 0.615764, 0.431034, 0.753695, 0.677340, 0.487685, 0.184797, 0.120690, 0.216256, 0.492611, 0.108128, 0.246305, 0.369458,
0.027032, 0.061576, 0.184729, 0.059113, 0.123153, 0.088670, 0.615776, 0.197044, 0.189224, 0.431034, 0.554187, 0.238916, 0.369458, 0.266010, 0.000037, 0.061576,
0.800493, 0.576355, 0.123233, 0.615764, 0.677340, 0.487685, 0.246373, 0.140394, 0.270320, 0.615764, 0.431034, 1.000000, 0.054064, 0.123153, 0.677340, 0.278325,
0.862069, 0.620690, 0.123239, 0.162562, 0.677340, 0.487685, 0.307950, 0.098552, 0.432512, 0.985222, 0.862069, 0.399015, 0.432512, 0.985222, 0.184729, 0.182266))
## Functions
# Function to tabulate codon frequency, excluding stop codons
codon_c <- function(s) {
x <- as.data.frame(uco(s2c(s), frame = 0, index = "eff"))
x <- x[which(!(x$Var1 %in% c("taa", "tag", "tga"))), ]
rownames(x) <- as.character(toupper(unlist(x[, "Var1"])))
x <- x[match(opt$codon, (rownames(x))), ]
x <- matrix(t(x[, 2]), ncol = 61)
return(x)
}
# Function to automate codon_c over a list of sequences
codonMatrix <- function(data) {
mat <- matrix(0L, nrow = length(data), ncol = 61)
for (i in 1:length(data)) {
mat[i, ] <- codon_c(data[i])
}
return(mat)
}
# Function to calculate tAI. From https://github.com/mariodosreis/tai
get.tai <- function(x,w) {
w = log(w)              # calculate log of w
n = apply(x,1,'*',w)    # multiply each row of by the weights
n = t(n)                # transpose
n = apply(n,1,sum)      # sum rows
L = apply(x,1,sum)      # get each ORF length
tAI = exp(n/L)          # get tai
return(tAI)
}
## Get tAI
mat_cds <- codonMatrix(seq_cds)
## Functions
# Function to tabulate codon frequency, excluding stop codons
codon_c <- function(s) {
x <- as.data.frame(uco(s2c(s), frame = 0, index = "eff"))
x <- x[which(!(x$Var1 %in% c("taa", "tag", "tga"))), ]
rownames(x) <- as.character(toupper(unlist(x[, "Var1"])))
x <- x[match(scw$codons, (rownames(x))), ]
x <- matrix(t(x[, 2]), ncol = 61)
return(x)
}
## Get tAI
mat_cds <- codonMatrix(seq_cds)
tAI_cds <- get.tai(x = mat_cds, w = scw)
View(codonMatrix)
View(mat_cds)
tAI_cds <- get.tai(x = mat_cds, w = scw$w)
opt_df <- data.frame(transcript_id = transcriptome[, "transcript_id"], tAI_cds = tAI_cds)
View(opt_df)
write.table(opt_df, file = "transcriptome_v5_codon_optimality_tAI_cds.txt", quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
opt_df <- read.table("transcriptome_v5_codon_optimality_tAI_cds.txt", header = TRUE)
toplot <- left_join(toplot, opt_df, by = c("row" = "transcript_id"))
nn <- data.frame(table(sample = toplot$sample, NMD = toplot$NMD, IPvsTotal_change = toplot$IPvsTotal_change))
stat.test <- toplot[toplot$sample %in% xx, ] %>%
group_by(sample, NMD) %>%
wilcox_test(cTE_cds~IPvsTotal_change, comparisons = comps) %>%
adjust_pvalue(method = "fdr") %>%
add_significance()
stat.test <- stat.test %>% add_xy_position(x = "IPvsTotal_change", step.increase = 0.02)
steps <- 0.01
ybase <- 0.5
stat.test[stat.test$groups == 'c("Unchanged", "Enriched in IP")', ]$y.position <- ybase
stat.test[stat.test$groups == 'c("Enriched in IP", "Depleted in IP")', ]$y.position <- ybase + steps
stat.test[stat.test$groups == 'c("Unchanged", "Depleted in IP")', ]$y.position <- ybase + steps + steps
stat.test <- toplot[toplot$sample %in% xx, ] %>%
group_by(sample, NMD) %>%
wilcox_test(tAI_cds~IPvsTotal_change, comparisons = comps) %>%
adjust_pvalue(method = "fdr") %>%
add_significance()
stat.test <- stat.test %>% add_xy_position(x = "IPvsTotal_change", step.increase = 0.02)
steps <- 0.01
ybase <- 0.5
stat.test[stat.test$groups == 'c("Unchanged", "Enriched in IP")', ]$y.position <- ybase
stat.test[stat.test$groups == 'c("Enriched in IP", "Depleted in IP")', ]$y.position <- ybase + steps
stat.test[stat.test$groups == 'c("Unchanged", "Depleted in IP")', ]$y.position <- ybase + steps + steps
library(rstatix)
stat.test <- toplot_filter[toplot_filter$sample %in% xx, ] %>%
group_by(sample, NMD) %>%
wilcox_test(RO_log2FoldChange~IPvsTotal_change, comparisons = comps) %>%
adjust_pvalue(method = "fdr") %>%
add_significance()
stat.test <- toplot[toplot$sample %in% xx, ] %>%
group_by(sample, NMD) %>%
wilcox_test(l_cds~IPvsTotal_change, comparisons = comps) %>%
adjust_pvalue(method = "fdr") %>%
add_significance()
xx <- c("UPF1-FLAG (+CHX)", "UPF1-FLAG/upf2Δ (+CHX)", "DE572AA-FLAG (+CHX)")
comps <- list(c("Unchanged", "Enriched in IP"), c("Enriched in IP", "Depleted in IP"), c("Unchanged", "Depleted in IP"))
stat.test <- toplot[toplot$sample %in% xx, ] %>%
group_by(sample, NMD) %>%
wilcox_test(tAI_cds~IPvsTotal_change, comparisons = comps) %>%
adjust_pvalue(method = "fdr") %>%
add_significance()
stat.test <- stat.test %>% add_xy_position(x = "IPvsTotal_change", step.increase = 0.02)
steps <- 0.01
ybase <- 0.5
stat.test[stat.test$groups == 'c("Unchanged", "Enriched in IP")', ]$y.position <- ybase
stat.test[stat.test$groups == 'c("Enriched in IP", "Depleted in IP")', ]$y.position <- ybase + steps
stat.test[stat.test$groups == 'c("Unchanged", "Depleted in IP")', ]$y.position <- ybase + steps + steps
D <- ggplot(toplot[toplot$sample %in% xx, ], aes(x = IPvsTotal_change, y = cTE_cds)) +
geom_boxplot(aes(fill = IPvsTotal_change), outlier.color = NA, width = 0.75, size = 0.5) +
stat_pvalue_manual(data = stat.test, label = "p.adj.signif", tip.length = 0.005, size = 1.5, vjust = 0.3) +
geom_text(data = nn[nn$sample %in% xx, ], aes(x = IPvsTotal_change, y = 0.2, label = paste0("n = ", Freq)), size = 1.5) +
facet_nested(.~sample+NMD, nest_line = TRUE) +
scale_fill_manual(name = "", values = c("grey70", "orange", "purple")) +
xlab("") + ylab("Codon optimality score in CDS") +
coord_cartesian(ylim = c(0.2, 0.52)) +
theme_bw(base_size = 8) +
theme(strip.background = element_blank(),
strip.text.x = element_text(face = "italic"), legend.position = "none",
panel.grid = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank())
D
D <- ggplot(toplot[toplot$sample %in% xx, ], aes(x = IPvsTotal_change, y = tAI_cds)) +
geom_boxplot(aes(fill = IPvsTotal_change), outlier.color = NA, width = 0.75, size = 0.5) +
stat_pvalue_manual(data = stat.test, label = "p.adj.signif", tip.length = 0.005, size = 1.5, vjust = 0.3) +
geom_text(data = nn[nn$sample %in% xx, ], aes(x = IPvsTotal_change, y = 0.2, label = paste0("n = ", Freq)), size = 1.5) +
facet_nested(.~sample+NMD, nest_line = TRUE) +
scale_fill_manual(name = "", values = c("grey70", "orange", "purple")) +
xlab("") + ylab("Codon optimality score in CDS") +
coord_cartesian(ylim = c(0.2, 0.52)) +
theme_bw(base_size = 8) +
theme(strip.background = element_blank(),
strip.text.x = element_text(face = "italic"), legend.position = "none",
panel.grid = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank())
D
require(DESeq2)
(.packages())
if (!("DESeq2" %in% (.packages()))) library(DESeq2)
detach("package:DESeq2", unload = TRUE)
if (!("DESeq2" %in% (.packages()))) library(DESeq2)
(.packages())
if (!("gplots" %in% (.packages()))) library(DESeq2)
(.packages())
if (!("gplots" %in% (.packages()))) library(gplots)
(.packages())
