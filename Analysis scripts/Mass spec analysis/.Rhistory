library(readxl)
library(dplyr)
library(data.table)
library(reshape2)
library(limma)
library(MASS)
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(ggh4x)
library(scales)
source("functions_mass_spec.R")
mass_spec_data <- consolidate(filepath = "../../Processed data/Mass spec/Mass spectrometry C-terminal data.xlsx")
ibaq <- list()
ibaq[["UPF1-FLAG"]] <- ave_nonzero_combine(dat = mass_spec_data, Total_col = c(14, 2, 4), IP_col = c(15, 3, 5), minrep = 2)
ibaq[["UPF1-FLAG/upf2Δ"]] <- ave_nonzero_combine(dat = mass_spec_data, Total_col = c(12, 16, 18), IP_col = c(13, 17, 19), minrep = 2)
ibaq[["DE572AA-FLAG"]] <- ave_nonzero_combine(dat = mass_spec_data, Total_col = c(10, 6, 8), IP_col = c(11, 7, 9), minrep = 2)
# Run eb_fit for differential expression
DE_Cterm <- lapply(ibaq, function(x) {xx <- x$separate; y <- eb_fit(xx); return(y)})
# For volcano plot
VP_Cterm <- bind_rows(lapply(DE_Cterm, function(x) {xx <- x$eb_fit_res; return(xx)}), .id = "sample")
# For scatter plot
SP_Cterm <- bind_rows(lapply(ibaq, function(x) {xx <- x$average; return(xx)}), .id = "sample")
mass_spec_data <- consolidate(filepath = "../../Processed data/Mass spec/Mass spectrometry FLAG-Upf1.xlsx")
ibaq <- list()
ibaq[["FLAG-UPF1 (-CHX)"]] <- ave_nonzero_combine(dat = mass_spec_data, Total_col = c(3, 5), IP_col = c(7, 9), minrep = 2)
ibaq[["FLAG-UPF1 (+CHX)"]] <- ave_nonzero_combine(dat = mass_spec_data, Total_col = c(2, 4), IP_col = c(6, 8), minrep = 2)
# Run eb_fit for differential expression
DE_Nterm <- lapply(ibaq, function(x) {xx <- x$separate; y <- eb_fit(xx); return(y)})
# For volcano plot
VP_Nterm <- bind_rows(lapply(DE_Nterm, function(x) {xx <- x$eb_fit_res; return(xx)}), .id = "sample")
# For scatter plot
SP_Nterm <- bind_rows(lapply(ibaq, function(x) {xx <- x$average; return(xx)}), .id = "sample")
mass_spec_data <- consolidate(filepath = "../../Processed data/Mass spec/Mass spectrometry FLAG-Upf1 Upf2-Upf3 EE data.xlsx")
ibaq <- list()
ibaq[["FLAG-UPF1 UPF2/3 EE"]] <- ave_nonzero_combine(dat = mass_spec_data, Total_col = c(2, 4), IP_col = c(3, 5), minrep = 2)
# Run eb_fit for differential expression
DE_OE3 <- lapply(ibaq, function(x) {xx <- x$separate; y <- eb_fit(xx); return(y)})
# For volcano plot
VP_OE3 <- bind_rows(lapply(DE_OE3, function(x) {xx <- x$eb_fit_res; return(xx)}), .id = "sample")
# For scatter plot
SP_OE3<- bind_rows(lapply(ibaq, function(x) {xx <- x$average; return(xx)}), .id = "sample")
mass_spec_data <- consolidate(filepath = "../.../Processed data/Mass spec/Mass spectrometry 6XHis-Upf1 data.xlsx")
mass_spec_data <- consolidate(filepath = "../../Processed data/Mass spec/Mass spectrometry 6XHis-Upf1 data.xlsx")
ibaq_pass <- mass_spec_data[rowSums(mass_spec_data[, 2:3]) > 0, ]
colnames(ibaq_pass) <- c("Protein", "Total", "IP")
ibaq_pass[ibaq_pass == 0] <- NA
# Emulate results of other strains
DE_His <- list()
DE_His[["6XHis-UPF1"]] <- list()
DE_His[["6XHis-UPF1"]]$IP_exclusive <- ibaq_pass[is.na(ibaq_pass$Total), ]
DE_His[["6XHis-UPF1"]]$Total_exclusive <- ibaq_pass[is.na(ibaq_pass$IP), ]
DE_His[["6XHis-UPF1"]]$filtered <- ibaq_pass[!(ibaq_pass$Protein %in% c(DE_His[["6XHis-UPF1"]]$Total_exclusive$Protein,
DE_His[["6XHis-UPF1"]]$IP_exclusive$Protein)), ]
# For scatter plot
SP_His <- ibaq_pass
SP_His$sample <- "6XHis-UPF1"
res_df <- bind_rows(list(VP_Cterm, VP_Nterm, VP_OE3))
res_df <- label_protein(res_df)
#res_df$sample <- factor(res_df$sample, levels = sort(unique(res_df$sample))[c(2:6, 1)])
res_df$sample <- recode_factor(res_df$sample, `FLAG-UPF1 (-CHX)` = "FLAG-UPF1 (-CHX)", `FLAG-UPF1 (+CHX)` = "FLAG-UPF1 (+CHX)",
`FLAG-UPF1_UPF2_UPF3_EE` = "FLAG-UPF1 UPF2/3 EE (+CHX)", `UPF1-FLAG` = "UPF1-FLAG (+CHX)",
`UPF1-FLAG_upf2del` = "UPF1-FLAG/upf2Δ (+CHX)", `DE572AA-FLAG` = "DE572AA-FLAG (+CHX)")
# Additional label
#add_lab <- c("Translation initiation factor", "Translation elongation factor")
#res_df[res_df$Protein2 %in% add_lab, ]$repel <- stringr::str_to_title(res_df[res_df$Protein2 %in% add_lab, ]$Protein)
add_lab <- c("RPP2A", "RPP2B")
res_df[res_df$Protein %in% add_lab, ]$repel <- stringr::str_to_title(res_df[res_df$Protein %in% add_lab, ]$Protein)
pvolcano <- ggplot() +
# Other (uncategorized proteins)
geom_point(data = res_df[res_df$Protein2 == "Other", ],
aes(x = logFC, y = -log10(adj.P.Val)), alpha = 0.5, color = "grey60", size = 0.7) +
# Categorized
geom_point(data = res_df[res_df$Protein2 != "Other", ],
aes(x = logFC, y = -log10(adj.P.Val), color = Protein2), alpha = 0.8, size = 0.7) +
# Proteins to label
geom_point(data = res_df[res_df$repel != "", ],
aes(x = logFC, y = -log10(adj.P.Val), color = Protein2), alpha = 1, size = 0.7) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "grey50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "grey50") +
geom_label_repel(data = res_df,
aes(x = logFC, y = -log10(adj.P.Val), color = Protein2, label = repel), alpha = 1, size = 1.5,
show.legend = FALSE, max.overlaps = Inf, min.segment.length = 0, box.padding = 0.2, segment.size = 0.2, hjust = 0.5,
direction = "both", point.padding = 0, label.padding = 0.1) +
facet_wrap(~sample, nrow = 2) +
scale_color_manual(name = "", #limits = c("Upf1", "Upf2", "Upf3", "Ribosomal protein", "Other"),
values = c(Upf1 = "red", Upf2 = "darkorange", Upf3 = "darkgreen",`Ribosomal protein` = "dodgerblue",
`Translation initiation factor` = "darkblue", `Translation elongation factor` = "darkviolet",
`Translation termination factor` = "limegreen", `mRNA decay factor` = "brown",
`Protein folding chaperone` = "gold", Other = "grey60")) +
xlab(expression("log"[2]*"(IP / Total)")) + ylab(expression("-log"[10]*"(adjusted p-value)")) +
coord_cartesian(clip = "off") +
theme_bw(base_size = 8) +
theme(panel.grid = element_blank(), strip.background = element_blank(), strip.text = element_text(face = "italic"),
#panel.border = element_rect(size = 0.5, colour = "black"),
legend.position = "bottom", legend.key.width = unit(0.1, "cm"),
legend.text = element_text(margin = margin(r = 0.5, unit = "cm"))) +
guides(colour = guide_legend(title = NULL, byrow = FALSE, override.aes = list(size = 1)),
alpha = guide_legend(override.aes = list(alpha = 1)),
shape = "none")
pvolcano
dfs <- bind_rows(list(SP_Cterm, SP_Nterm, SP_OE3, SP_His))
dfs <- label_protein(dfs)
dfs[is.na(dfs)] <- 0 # Replace NA with 0
dfs <- dfs[which(dfs$IP > 0 | dfs$Total > 0), ] # Exclude proteins that's 0 for both IP and Total
dfs$sample <- recode_factor(dfs$sample, `FLAG-UPF1 (-CHX)` = "FLAG-UPF1 (-CHX)", `FLAG-UPF1 (+CHX)` = "FLAG-UPF1 (+CHX)",
`FLAG-UPF1 UPF2/3 EE` = "FLAG-UPF1 UPF2/3 EE (+CHX)", `6XHis-UPF1` = "6XHis-UPF1 (+CHX)",
`UPF1-FLAG` = "UPF1-FLAG (+CHX)",
`UPF1-FLAG/upf2Δ` = "UPF1-FLAG/upf2Δ (+CHX)", `DE572AA-FLAG` = "DE572AA-FLAG (+CHX)")
# Additional label
add_lab <- c("RPP2A", "RPP2B")
dfs[dfs$Protein %in% add_lab, ]$repel <- stringr::str_to_title(dfs[dfs$Protein %in% add_lab, ]$Protein)
pscatter <- ggplot() +
# Other (uncategorized proteins)
geom_point(data = dfs[dfs$Protein2 == "Other", ],
aes(x = log10(Total), y = log10(IP)), alpha = 0.5, color = "grey60", size = 0.7) +
# Categorized
geom_point(data = dfs[dfs$Protein2 != "Other", ],
aes(x = log10(Total), y = log10(IP), color = Protein2), alpha = 0.8, size = 0.7) +
# Proteins to label
geom_point(data = dfs[dfs$repel != "", ],
aes(x = log10(Total), y = log10(IP), color = Protein2), alpha = 1, size = 0.7) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
geom_label_repel(data = dfs,
aes(x = log10(Total), y = log10(IP), color = Protein2, label = repel), alpha = 1, size = 1.5,
show.legend = FALSE, max.overlaps = Inf, min.segment.length = 0, box.padding = 0.2, segment.size = 0.2, hjust = 0.5,
direction = "both", point.padding = 0, label.padding = 0.1) +
facet_wrap(~sample, ncol = 4) +
scale_color_manual(name = "", #limits = c("Upf1", "Upf2", "Upf3", "Ribosomal proteins", "Other"),
values = c(Upf1 = "red", Upf2 = "darkorange", Upf3 = "darkgreen",`Ribosomal protein` = "dodgerblue",
`Translation initiation factor` = "darkblue", `Translation elongation factor` = "darkviolet",
`Translation termination factor` = "limegreen", `mRNA decay factor` = "brown",
`Protein folding chaperone` = "gold", Other = "grey60")) +
xlab(expression("log"[10]*"(Total)")) + ylab(expression("log"[10]*"(IP)")) +
coord_cartesian(xlim = c(4, 10.7), ylim = c(4, 10.7), clip = "off") +
theme_bw(base_size = 8) +
theme(panel.grid = element_blank(), strip.background = element_blank(), strip.text = element_text(face = "italic"),
legend.position = "none") +
guides(colour = guide_legend(title = NULL, byrow = FALSE, override.aes = list(size = 1), nrow = 3),
alpha = guide_legend(override.aes = list(alpha = 1)))
pscatter
library(patchwork)
library(ggpubr)
pv <- pvolcano + theme(legend.position = "none") + plot_spacer() + plot_layout(widths = c(3.1, 0.9), nrow = 1)
pleg <- get_legend(pvolcano)
psv <- ggarrange(pscatter, pv, pleg,
ncol = 1, nrow = 3, heights = c(1, 1, 0.1),
labels = c("A", "B", ""), font.label = list(size = 9, face = "bold"))
# Export plot
library(Cairo)
CairoFonts(
regular = "Arial:style=Regular",
bold = "Arial:style=Black",
italic = "Arial:style=Italic",
bolditalic = "Arial:style=Black Italic",
symbol = "Symbol"
)
psv
cairo_pdf(filename = "Mass_spec_scatter_volcano_v11_7x9.pdf", family = "Arial", width = 7, height = 9)
psv
dev.off()
?stringr::str_to_upper
# Additional label
tryCatch({res_df[which(res_df$Protein == "RPP2A"), ]$repel <- "Rpp2A"}, error = function(e){})
tryCatch({res_df[which(res_df$Protein == "RPP2B"), ]$repel <- "Rpp2B"}, error = function(e){})
pvolcano <- ggplot() +
# Other (uncategorized proteins)
geom_point(data = res_df[res_df$Protein2 == "Other", ],
aes(x = logFC, y = -log10(adj.P.Val)), alpha = 0.5, color = "grey60", size = 0.7) +
# Categorized
geom_point(data = res_df[res_df$Protein2 != "Other", ],
aes(x = logFC, y = -log10(adj.P.Val), color = Protein2), alpha = 0.8, size = 0.7) +
# Proteins to label
geom_point(data = res_df[res_df$repel != "", ],
aes(x = logFC, y = -log10(adj.P.Val), color = Protein2), alpha = 1, size = 0.7) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "grey50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "grey50") +
geom_label_repel(data = res_df,
aes(x = logFC, y = -log10(adj.P.Val), color = Protein2, label = repel), alpha = 1, size = 1.5,
show.legend = FALSE, max.overlaps = Inf, min.segment.length = 0, box.padding = 0.2, segment.size = 0.2, hjust = 0.5,
direction = "both", point.padding = 0, label.padding = 0.1) +
facet_wrap(~sample, nrow = 2) +
scale_color_manual(name = "",
values = c(Upf1 = "red", Upf2 = "darkorange", Upf3 = "darkgreen",`Ribosomal protein` = "dodgerblue",
`Translation initiation factor` = "darkblue", `Translation elongation factor` = "darkviolet",
`Translation termination factor` = "limegreen", `mRNA decay factor` = "brown",
`Protein folding chaperone` = "gold", Other = "grey60")) +
xlab(expression("log"[2]*"(IP / Total)")) + ylab(expression("-log"[10]*"(adjusted p-value)")) +
coord_cartesian(clip = "off") +
theme_bw(base_size = 8) +
theme(panel.grid = element_blank(), strip.background = element_blank(), strip.text = element_text(face = "italic"),
legend.position = "bottom", legend.key.width = unit(0.1, "cm"),
legend.text = element_text(margin = margin(r = 0.5, unit = "cm"))) +
guides(colour = guide_legend(title = NULL, byrow = FALSE, override.aes = list(size = 1)),
alpha = guide_legend(override.aes = list(alpha = 1)),
shape = "none")
# Additional label
tryCatch({dfs[which(dfs$Protein == "RPP2A"), ]$repel <- "Rpp2A"}, error = function(e){})
tryCatch({dfs[which(dfs$Protein == "RPP2B"), ]$repel <- "Rpp2B"}, error = function(e){})
pscatter <- ggplot() +
# Other (uncategorized proteins)
geom_point(data = dfs[dfs$Protein2 == "Other", ],
aes(x = log10(Total), y = log10(IP)), alpha = 0.5, color = "grey60", size = 0.7) +
# Categorized
geom_point(data = dfs[dfs$Protein2 != "Other", ],
aes(x = log10(Total), y = log10(IP), color = Protein2), alpha = 0.8, size = 0.7) +
# Proteins to label
geom_point(data = dfs[dfs$repel != "", ],
aes(x = log10(Total), y = log10(IP), color = Protein2), alpha = 1, size = 0.7) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
geom_label_repel(data = dfs,
aes(x = log10(Total), y = log10(IP), color = Protein2, label = repel), alpha = 1, size = 1.5,
show.legend = FALSE, max.overlaps = Inf, min.segment.length = 0, box.padding = 0.2, segment.size = 0.2, hjust = 0.5,
direction = "both", point.padding = 0, label.padding = 0.1) +
facet_wrap(~sample, ncol = 4) +
scale_color_manual(name = "", #limits = c("Upf1", "Upf2", "Upf3", "Ribosomal proteins", "Other"),
values = c(Upf1 = "red", Upf2 = "darkorange", Upf3 = "darkgreen",`Ribosomal protein` = "dodgerblue",
`Translation initiation factor` = "darkblue", `Translation elongation factor` = "darkviolet",
`Translation termination factor` = "limegreen", `mRNA decay factor` = "brown",
`Protein folding chaperone` = "gold", Other = "grey60")) +
xlab(expression("log"[10]*"(Total)")) + ylab(expression("log"[10]*"(IP)")) +
coord_cartesian(xlim = c(4, 10.7), ylim = c(4, 10.7), clip = "off") +
theme_bw(base_size = 8) +
theme(panel.grid = element_blank(), strip.background = element_blank(), strip.text = element_text(face = "italic"),
legend.position = "none") +
guides(colour = guide_legend(title = NULL, byrow = FALSE, override.aes = list(size = 1), nrow = 3),
alpha = guide_legend(override.aes = list(alpha = 1)))
pv <- pvolcano + theme(legend.position = "none") + plot_spacer() + plot_layout(widths = c(3.1, 0.9), nrow = 1)
pleg <- get_legend(pvolcano)
psv <- ggarrange(pscatter, pv, pleg,
ncol = 1, nrow = 3, heights = c(1, 1, 0.1),
labels = c("A", "B", ""), font.label = list(size = 9, face = "bold"))
cairo_pdf(filename = "../../Figures/Mass_spec_scatter_volcano_7x9.pdf", family = "Arial", width = 7, height = 9)
psv
dev.off()
warnings()
