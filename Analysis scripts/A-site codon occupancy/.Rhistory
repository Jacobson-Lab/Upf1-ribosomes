files <- list.files(path = "~/OneDrive - University Of Massachusetts Medical School/Robin/For_paper_v2_Upf1only/Ribo-Seq codon occupancy/output_codonpos/results/", pattern = ".*bycodon.txt", full.names = TRUE)
files <- files[!grepl(pattern = "OE3", files)]
files
df <- list()
for (i in 1:length(files)) {
x <- sub("_by.*", "", files[i])
x <- sub("\\.*/results//", "", x)
df[[i]] <- read.table(files[i], header = FALSE)
names(df)[i] <- x
}
names(df)
df <- list()
for (i in 1:length(files)) {
x <- sub("_by.*", "", files[i])
x <- sub("\\.*/results/", "", x)
df[[i]] <- read.table(files[i], header = FALSE)
names(df)[i] <- x
}
names(df)
df <- list()
for (i in 1:length(files)) {
x <- sub("_by.*", "", files[i])
x <- sub(".*\\/results/", "", x)
df[[i]] <- read.table(files[i], header = FALSE)
names(df)[i] <- x
}
names(df)
df <- list()
for (i in 1:length(files)) {
x <- sub("_by.*", "", files[i])
x <- sub(".*\\/results//", "", x)
df[[i]] <- read.table(files[i], header = FALSE)
names(df)[i] <- x
}
names(df)
df <- bind_rows(df, .id = "sample")
library(dplyr)
library(ggplot2)
library(ggrepel)
library(ggh4x)
library(scales)
library(ggpubr)
library(reshape2)
df <- bind_rows(df, .id = "sample")
colnames(df) <- c("sample", "size", "mean_occupancy", "Distance", "codon")
df$ribo <- sub("_.*", "", df$sample)
df$strain <- sub(".*[Pl]_", "", df$sample)
df$CHX <- ifelse(test = grepl(pattern = "CHXm", x = df$sample), yes = "-CHX", no = "+CHX")
df[which(df$CHX == "-CHX" & df$size == "Z"), ]$size <- "S"
df[which(df$CHX == "+CHX" & df$size == "Z"), ]$size <- "L"
df <- df[which(!(df$ribo == "Total" & df$size == "L")), ]
df <- df[which(!(df$strain == "DE572AA-FLAG" & df$size == "L")), ]
write.table(x = df, file = "A-site_codon_occupancy_window30_bycodon_allsamples.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
df2 <- read.table("A-site_codon_occupancy_window30_bycodon_allsamples.txt", header = TRUE)
identical(df, df2)
View(df)
View(df2)
all.equal(df, df2)
View(df)
View(df2)
all.equal(df, df2, check.attributes = FALSE)
df <- read.table("A-site_codon_occupancy_window30_bycodon_allsamples.txt", header = TRUE)
rm(df2)
df$aa <- unlist(lapply((lapply(df[, "codon"], seqinr::s2c)), seqinr::translate))
df <- list()
for (i in 1:length(files)) {
x <- sub("_by.*", "", files[i])
x <- sub("\\./results//", "", x)
df[[i]] <- read.table(files[i], header = FALSE)
names(df)[i] <- x
}
df <- bind_rows(df, .id = "sample")
colnames(df) <- c("sample", "size", "mean_occupancy", "Distance", "codon")
df$ribo <- sub("_.*", "", df$sample)
df$strain <- sub(".*[Pl]_", "", df$sample)
df$CHX <- ifelse(test = grepl(pattern = "CHXm", x = df$sample), yes = "-CHX", no = "+CHX")
df[which(df$CHX == "-CHX" & df$size == "Z"), ]$size <- "S"
df[which(df$CHX == "+CHX" & df$size == "Z"), ]$size <- "L"
df <- df[which(!(df$ribo == "Total" & df$size == "L")), ]
df <- df[which(!(df$strain == "DE572AA-FLAG" & df$size == "L")), ]
df <- df[which(df$Distance != range(df$Distance)[2]), ] # Take out the last codon position because it is not triplet
df <- read.table("A-site_codon_occupancy_window30_bycodon_allsamples.txt", header = TRUE)
# Translate codon into amino acid (aa)
df$aa <- unlist(lapply((lapply(df[, "codon"], seqinr::s2c)), seqinr::translate))
# Convert T to U (to represent mRNA)
df$codon <- gsub("T", "U", df$codon)
# Combine codon and aa
df$codon_aa <- paste0(df$codon, " (", df$aa, ")")
# Take out the last codon position because it is not triplet
df <- df[which(df$Distance != range(df$Distance)[2]), ]
# Rename and relevel factors
df$strain <- recode_factor(df$strain, WT_CHXm = "WT + EV (N) (-CHX)", `FLAG-Upf1_CHXm` = "FLAG-UPF1 (-CHX)",
WT_CHXp = "WT + EV (N) (+CHX)", `FLAG-Upf1_CHXp` = "FLAG-UPF1 (+CHX)",
WT_EV = "WT + EV (C)", `Upf1-FLAG` = "UPF1-FLAG",
`Upf1-FLAG-upf2del` = "UPF1-FLAG/upf2Δ", `DE572AA-FLAG` = "DE572AA-FLAG")
df$size <- factor(df$size, levels = c("S", "M", "L"))
aa_levs <- c("K", "N", "T", "I", "M", "Q", "H", "P", "R", "L", "E", "D", "A", "G", "V", "Y", "S", "C", "W", "F", "*")
df$aa <- factor(df$aa, levels = aa_levs)
df2 <- dcast(df_filter, CHX + strain + size + Distance + codon + aa + codon_aa ~ ribo, value.var = "mean_occupancy")
# Plot only major footprints in the C-terminal data set
df_filter <- df[which(df$size == "M"), ]
forplot <- c("WT + EV (C)", "UPF1-FLAG", "UPF1-FLAG/upf2Δ", "DE572AA-FLAG")
A <- ggplot(df_filter[df_filter$strain %in% forplot & df_filter$Distance %in% seq(-10, 10, 1), ],
aes(x = Distance, y = codon_aa, fill = mean_occupancy)) +
geom_tile() +
# order/group codons by aa
facet_nested(aa~strain+ribo, scales = "free_y", space = "free_y", strip = strip_nested(size = "variable"), nest_line = TRUE) +
scale_y_discrete(limits = rev) +
scale_x_continuous(expand = c(0, 0)) +
scale_fill_distiller(name = "Mean relative occupancy  ", palette = "RdBu", direction = -1, limits = c(0, 2), oob = squish,
labels = c("0.0", "0.5", "1.0", "1.5", "> 2.0")) +
xlab("Codon distance to A-site") + ylab("") +
theme_bw(base_size = 8) +
theme(panel.grid = element_blank(), panel.spacing.y = unit(0, "in"), #panel.border = element_blank(),
legend.position = "top", plot.title = element_text(hjust = 0.5, face = "italic"),
strip.background = element_blank(),
strip.text = element_text(angle = 0, face = "italic"), strip.text.y = element_blank()) +
guides(fill = guide_colorbar(barheight = 0.5))
A
df2 <- dcast(df_filter, CHX + strain + size + Distance + codon + aa + codon_aa ~ ribo, value.var = "mean_occupancy")
View(df2)
# Only do major footprints, filter out WT
df2 <- df[which((df$size == "S" & df_SM$CHX == "-CHX") | (df$size == "M" & df$CHX == "+CHX")), ]
# Only do major footprints, filter out WT
df2 <- df[which((df$size == "S" & df$CHX == "-CHX") | (df$size == "M" & df$CHX == "+CHX")), ]
df2 <- df2[which(!grepl("WT", df2$strain)), ]
# Calculate log2(IP / Total)
df2 <- dcast(df2, CHX + strain + size + Distance + codon + aa + codon_aa ~ ribo, value.var = "mean_occupancy")
df2$IPvsTotal <- df2$IP / df2$Total
B <- ggplot(df2[df2$Distance %in% seq(-10, 10, 1) & df2$strain %in% forplot, ],
aes(x = Distance, fill = log2(IPvsTotal), y = codon_aa)) +
geom_tile() +
facet_nested(aa~strain+size, scales = "free_y", space = "free_y", strip = strip_nested(size = "variable"), nest_line = TRUE) +
scale_fill_gradient2(name = expression("log"[2]*"(IP / Total)  "), low = "purple", mid = "white", high = "orange", midpoint = 0,
limits = c(-1, 1), oob = squish,
breaks = seq(-1, 1, length = 5), labels = c("< -1.0", "-0.5", "0.0", "0.5", "> 1.0")) +
scale_y_discrete(limits = rev) +
scale_x_continuous(expand = c(0, 0)) +
xlab("Codon distance to A-site") + ylab("") +
theme_bw(base_size = 8) +
theme(panel.grid = element_blank(), legend.position = "top", panel.spacing.y = unit(0, "in"),
strip.background = element_blank(), strip.text = element_text(face = "italic"), strip.text.y = element_blank()) +
guides(fill = guide_colorbar(barheight = 0.5))
library(patchwork)
library(Cairo)
CairoFonts(
regular = "Arial:style=Regular",
bold = "Arial:style=Black",
italic = "Arial:style=Italic",
bolditalic = "Arial:style=Black Italic",
symbol = "Symbol"
)
p <- (A + B) +
plot_layout(nrow = 1, widths = c(7, 3), guides = "keep") +
plot_annotation(tag_levels = 'A') &
theme(plot.tag = element_text(size = 9, face = "bold"), plot.tag.position = "topleft")
p
## Prepare codon optimality score (a.k.a "w") for each codon
# Derived from dos Reis et al., 2004 (doi: 10.1093/nar/gkh834).
# Obtained the calculated values from Tuller et al., 2010 (doi: 10.1073/pnas.0909910107)
scw <- data.frame(codons = c("TTT", "TTC", "TTA", "TTG", "TCT", "TCC", "TCA", "TCG", "TAT", "TAC", "TGT", "TGC", "TGG",
"CTT", "CTC", "CTA", "CTG", "CCT", "CCC", "CCA", "CCG", "CAT", "CAC", "CAA", "CAG", "CGT", "CGC", "CGA", "CGG",
"ATT", "ATC", "ATA", "ATG", "ACT", "ACC", "ACA", "ACG", "AAT", "AAC", "AAA", "AAG", "AGT", "AGC", "AGA", "AGG",
"GTT", "GTC", "GTA", "GTG", "GCT", "GCC", "GCA", "GCG", "GAT", "GAC", "GAA", "GAG", "GGT", "GGC", "GGA", "GGG"),
w = c(0.270320, 0.615764, 0.431034, 0.753695, 0.677340, 0.487685, 0.184797, 0.120690, 0.216256, 0.492611, 0.108128, 0.246305, 0.369458,
0.027032, 0.061576, 0.184729, 0.059113, 0.123153, 0.088670, 0.615776, 0.197044, 0.189224, 0.431034, 0.554187, 0.238916, 0.369458, 0.266010, 0.000037, 0.061576,
0.800493, 0.576355, 0.123233, 0.615764, 0.677340, 0.487685, 0.246373, 0.140394, 0.270320, 0.615764, 0.431034, 1.000000, 0.054064, 0.123153, 0.677340, 0.278325,
0.862069, 0.620690, 0.123239, 0.162562, 0.677340, 0.487685, 0.307950, 0.098552, 0.432512, 0.985222, 0.862069, 0.399015, 0.432512, 0.985222, 0.184729, 0.182266))
write.table(scw, file = "codon_optimality_w.txt", row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "\t")
## Prepare codon optimality score (a.k.a "w") for each codon
# Derived from dos Reis et al., 2004 (doi: 10.1093/nar/gkh834).
# Obtained the calculated values from Tuller et al., 2010 (doi: 10.1073/pnas.0909910107)
scw <- read.table("codon_optimality_w.txt", header = TRUE)
View(scw)
scw <- read.table("../Codon optimality/codon_optimality_w.txt", header = TRUE)
# Mean relative occupancy at position 0 (when codon of interest is in the ribosomal A-site)
df_A <- df[which(df$Distance == 0), ]
cols <- c("strain", "CHX", "ribo", "size")
df_A_cor <- df_A %>%
group_by(across(all_of(cols))) %>%
summarize(cor = cor(mean_occupancy, 1/tAI, method = "spearman", use = "pairwise.complete.obs"))
colnames(scw)
scw$aa <- unlist(lapply((lapply(scw[, "codons"], seqinr::s2c)), seqinr::translate))
scw$codons <- gsub("T", "U", scw$codons)
scw$codon_aa <- paste0(scw$codons, " (", scw$aa, ")")
colnames(scw)[2] <- "tAI"
View(scw)
# Mean relative occupancy at position 0 (when codon of interest is in the ribosomal A-site)
df_A <- df[which(df$Distance == 0), ]
df_A <- left_join(df_A, scw[, c("codon_aa", "tAI")], by = "codon_aa")
cols <- c("strain", "CHX", "ribo", "size")
df_A_cor <- df_A %>%
group_by(across(all_of(cols))) %>%
summarize(cor = cor(mean_occupancy, 1/tAI, method = "spearman", use = "pairwise.complete.obs"))
df_A_cor$ribo <- factor(df_A_cor$ribo, levels = c("Total", "IP"))
df_A_cor$strain <- sub(" \\(-CHX)", "", df_A_cor$strain)
df_A_cor$strain <- sub(" \\(\\+CHX)", "", df_A_cor$strain)
df_A_cor$strain <- factor(df_A_cor$strain, levels = sort(unique(df_A_cor$strain))[c(6, 2, 5, 3, 4, 1)])
View(df_A_cor)
View(df_A)
tai_0 <- ggplot(df_0, aes(x = strain, y = cor, color = ribo, shape = CHX)) +
geom_point(size = 1.5) +
geom_hline(yintercept = 0, linetype = "dashed") +
facet_grid(.~size, scales = "free_x", space = "free") +
scale_color_manual(name = "", values = c(Total = "purple", IP = "orange")) +
scale_shape_manual(name = "", values = c(`-CHX` = 1, `+CHX` = 10)) +
ylab("Spearman's rank correlation of\n A-site mean relative occupancy\n(position 0) with 1 / tAI") + xlab("") +
coord_cartesian(ylim = c(-0.4, 0.4)) +
theme_bw(base_size = 8) +
theme(panel.grid = element_blank(), strip.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = "italic"), legend.position = "top")
tai_0 <- ggplot(df_A, aes(x = strain, y = cor, color = ribo, shape = CHX)) +
geom_point(size = 1.5) +
geom_hline(yintercept = 0, linetype = "dashed") +
facet_grid(.~size, scales = "free_x", space = "free") +
scale_color_manual(name = "", values = c(Total = "purple", IP = "orange")) +
scale_shape_manual(name = "", values = c(`-CHX` = 1, `+CHX` = 10)) +
ylab("Spearman's rank correlation of\n A-site mean relative occupancy\n(position 0) with 1 / tAI") + xlab("") +
coord_cartesian(ylim = c(-0.4, 0.4)) +
theme_bw(base_size = 8) +
theme(panel.grid = element_blank(), strip.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = "italic"), legend.position = "top")
tai_0
tai_0 <- ggplot(df_A_cor, aes(x = strain, y = cor, color = ribo, shape = CHX)) +
geom_point(size = 1.5) +
geom_hline(yintercept = 0, linetype = "dashed") +
facet_grid(.~size, scales = "free_x", space = "free") +
scale_color_manual(name = "", values = c(Total = "purple", IP = "orange")) +
scale_shape_manual(name = "", values = c(`-CHX` = 1, `+CHX` = 10)) +
ylab("Spearman's rank correlation of\n A-site mean relative occupancy\n(position 0) with 1 / tAI") + xlab("") +
coord_cartesian(ylim = c(-0.4, 0.4)) +
theme_bw(base_size = 8) +
theme(panel.grid = element_blank(), strip.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, face = "italic"), legend.position = "top")
tai_0
unique(df[, c("sample", "size")])
View(df)
